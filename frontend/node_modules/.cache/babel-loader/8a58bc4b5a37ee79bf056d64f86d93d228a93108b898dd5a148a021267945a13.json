{"ast":null,"code":"// import { useEffect, useState } from \"react\"\n// import { myAxiosAws } from '../services/helperAws';\n// import { TableInstances } from \"../utilities/TableInstances\";\n// import { Loading } from '../utilities/Loading'\n// export const S3Buckets = () => {\n//     const [Data, setData] = useState([]);\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await myAxiosAws.get(\"/api/v1/buckets\").then((response) => response.data).then((response) => {\n//                     setData(response);\n//                 });\n//                 console.log(response);\n//             } catch (error) {\n//                 console.log(error);\n//             }\n\n//         }\n\n//         fetchData();\n//     }, [])\n//     const tableInstance = TableInstances(Data);\n//     const { getTableProps, getTableBodyProps, headerGroups, page, nextPage, previousPage, prepareRow, canNextPage, canPreviousPage, pageOptions, state, gotoPage, pageCount, setPageSize } = tableInstance;\n//     return (\n//         <div>\n//             {Data.length > 0 ? (<div >\n//                 <table  {...getTableProps()} className=\"table\">\n//                     <thead>\n//                         {headerGroups.map((headerGroup) => (\n//                             <tr {...headerGroup.getHeaderGroupProps()}>\n//                                 {headerGroup.headers.map((column) => (\n//                                     <th  {...column.getHeaderProps(column.getSortByToggleProps())} className=\"table-header\">\n//                                         {column.render(\"Header\")}\n//                                         <span>\n//                                             {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"\"}\n//                                         </span>\n//                                     </th>\n//                                 ))}\n//                             </tr>\n//                         ))}\n//                     </thead>\n//                     <tbody {...getTableBodyProps()}>\n//                         {page.map((row) => {\n//                             prepareRow(row);\n//                             return (\n//                                 <tr {...row.getRowProps()} className=\"table-row\">\n//                                     {row.cells.map((cell) => {\n//                                         return <td {...cell.getCellProps()} className=\"table-cell\">{cell.render(\"Cell\")}</td>;\n//                                     })}\n//                                 </tr>\n//                             );\n//                         })}\n//                     </tbody>\n//                 </table>\n\n//                 <div className=\"page-selector\">\n//                     <span>\n//                         Page {' '}\n//                         <strong>\n//                             {state.pageIndex + 1} of {pageOptions.length}\n//                         </strong>\n//                     </span>\n//                     <select value={state.pageSize} onChange={(e) => (\n//                         setPageSize(e.target.value)\n//                     )}>{\n//                             [10, 25, 40].map(pageSize => (\n//                                 <option key={pageSize} value={pageSize}>\n//                                     show {pageSize}\n//                                 </option>\n//                             ))\n//                         }\n\n//                     </select>\n//                 </div>\n//                 <div>\n\n//                     <button className=\"green focus dark\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'} </button>\n//                     <button className=\"green focus dark\" onClick={() => previousPage()} disabled={!canPreviousPage}>PreviousPage</button>\n//                     <button className=\"green focus dark\" onClick={() => nextPage()} disabled={!canNextPage}>NextPage</button>\n//                     <button className=\"green focus dark\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\n//                     go to page:\n//                     <input type=\"number\" defaultValue={state.pageIndex + 1} onChange={e => {\n//                         const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n//                         gotoPage(pageNumber)\n//                     }}></input>\n\n//                 </div>\n\n//             </div >) : (<Loading />)}\n\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["/Users/ape/Desktop/FINAL/frontend/src/pages/S3Buckets.js"],"sourcesContent":["// import { useEffect, useState } from \"react\"\n// import { myAxiosAws } from '../services/helperAws';\n// import { TableInstances } from \"../utilities/TableInstances\";\n// import { Loading } from '../utilities/Loading'\n// export const S3Buckets = () => {\n//     const [Data, setData] = useState([]);\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await myAxiosAws.get(\"/api/v1/buckets\").then((response) => response.data).then((response) => {\n//                     setData(response);\n//                 });\n//                 console.log(response);\n//             } catch (error) {\n//                 console.log(error);\n//             }\n\n//         }\n\n//         fetchData();\n//     }, [])\n//     const tableInstance = TableInstances(Data);\n//     const { getTableProps, getTableBodyProps, headerGroups, page, nextPage, previousPage, prepareRow, canNextPage, canPreviousPage, pageOptions, state, gotoPage, pageCount, setPageSize } = tableInstance;\n//     return (\n//         <div>\n//             {Data.length > 0 ? (<div >\n//                 <table  {...getTableProps()} className=\"table\">\n//                     <thead>\n//                         {headerGroups.map((headerGroup) => (\n//                             <tr {...headerGroup.getHeaderGroupProps()}>\n//                                 {headerGroup.headers.map((column) => (\n//                                     <th  {...column.getHeaderProps(column.getSortByToggleProps())} className=\"table-header\">\n//                                         {column.render(\"Header\")}\n//                                         <span>\n//                                             {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"\"}\n//                                         </span>\n//                                     </th>\n//                                 ))}\n//                             </tr>\n//                         ))}\n//                     </thead>\n//                     <tbody {...getTableBodyProps()}>\n//                         {page.map((row) => {\n//                             prepareRow(row);\n//                             return (\n//                                 <tr {...row.getRowProps()} className=\"table-row\">\n//                                     {row.cells.map((cell) => {\n//                                         return <td {...cell.getCellProps()} className=\"table-cell\">{cell.render(\"Cell\")}</td>;\n//                                     })}\n//                                 </tr>\n//                             );\n//                         })}\n//                     </tbody>\n//                 </table>\n\n//                 <div className=\"page-selector\">\n//                     <span>\n//                         Page {' '}\n//                         <strong>\n//                             {state.pageIndex + 1} of {pageOptions.length}\n//                         </strong>\n//                     </span>\n//                     <select value={state.pageSize} onChange={(e) => (\n//                         setPageSize(e.target.value)\n//                     )}>{\n//                             [10, 25, 40].map(pageSize => (\n//                                 <option key={pageSize} value={pageSize}>\n//                                     show {pageSize}\n//                                 </option>\n//                             ))\n//                         }\n\n//                     </select>\n//                 </div>\n//                 <div>\n\n//                     <button className=\"green focus dark\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'} </button>\n//                     <button className=\"green focus dark\" onClick={() => previousPage()} disabled={!canPreviousPage}>PreviousPage</button>\n//                     <button className=\"green focus dark\" onClick={() => nextPage()} disabled={!canNextPage}>NextPage</button>\n//                     <button className=\"green focus dark\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\n//                     go to page:\n//                     <input type=\"number\" defaultValue={state.pageIndex + 1} onChange={e => {\n//                         const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n//                         gotoPage(pageNumber)\n//                     }}></input>\n\n\n//                 </div>\n\n//             </div >) : (<Loading />)}\n\n//         </div>\n//     )\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}